# CITATION https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-amazon-elastic-container-service -- this article was great for automated deployment with ecs


name: Deploy to Prod Environment

on:
  push:
    branches: [ "prod" ]

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: prod-deployment

    steps:

      # bring code from the github repo into the action
      - name: Checkout
        uses: actions/checkout@v4

      # creating env file from environment variables
      - name: Create env file
        run: |
          cd server
          touch .env
          echo "${{ secrets.ENV_VARIABLES }}" > .env

      # Log into aws
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      # logging into ecr using the credentials in the last step (set as environment variables)
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      # Building and pushing image to backend ECR repo
      - name: Build, tag, and push backend image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REGISTRY_ALIAS: 044978490528.dkr.ecr.us-east-2.amazonaws.com
          REPOSITORY: tces-deploy
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          cd server
          docker build -f prod.Dockerfile -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:latest .
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:latest

      # Use the task definition in 
      - name: Deploy Amazon ECS task definition produced in task-def-backend-scraper to host the containers
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: aws/task-definition.json
          service: blueprint-prod
          cluster: blueprint-prod 
          wait-for-service-stability: true